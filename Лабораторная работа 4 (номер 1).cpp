/*Задание 1. При значениях x и N, определяемых вводом, вычислить частичную сумму ряда
SN(x). Найти абсолютную погрешность полученного результата (абсолютную величину
разности между значением соответствующей функции и SN(x)). Сравнить полученную
погрешность с абсолютной величиной последнего (N-го) слагаемого, включенного в
частичную сумму*/

/*Задание 2. При значениях x и Е, определяемых вводом, вычислить сумму тех слагаемых
заданного вида, которые по абсолютной величине больше Е. Подсчитать количество таких
слагаемых N. Выполнить суммирование для двух значений Е, отличающихся на порядок
(в 10 раз).*/

#include <iostream>
#include <string>

using std::endl;
using std::cin;
using std::cout;
using std::string;

double checkX(string x);  // Проверка введенного аргумента синуса
int checkN(string n); // Проверка введеного кол-ва переменных
double checkE(string e); // Проверка введённой точности
double sumN(double x, int n, double& last); // Вычис-ние част-ой суммы ряда с данным кол-вом слагаемых
double sumE(double x, double e, int& n); // Вычис-ние част-ой суммы ряда с данной точностью
void mistake(); // Вывод сообщ-я об ошибке
void end(); // Вывод сообщ-я о закрытии прог-мы

int main()
{
	setlocale(0, "");

	string c;
	while (true) // Основной цикл всей программы
	{
		cout << "Задание 1" << endl;

		while (true) // Цикл задания 1
		{
			// Ввод и проверка необходимых переменных

			// Ввод
			cout << "Введите значение аргумента:" << endl << "x = ";
			string xch;
			getline(cin, xch);

			// Проверка
			double x = checkX(xch); // Знач-е аргум-та
			if (x == 0)
			{
				mistake();
				continue;
			}

			// Ввод
			cout << "Введите количество членов ряда:" << endl << "n = ";
			string nch;
			getline(cin, nch);

			// Проверка
			int n = checkN(nch); // Кол-во слагаемых
			if (n == 0)
			{
				mistake();
				continue;
			}

			double last; // Последний член ряда
			double Sn = sumN(x, n, last); // Част-ная сумма ряда при данном кол-ве слагаемых
			double func = sin(x) / x; // Точное знач-е данной в зад-нии функции

			// Вывод результатов
			cout << "Частичная сумма ряда = " << Sn << endl;
			cout << "Точное значение данной в условии функции = " << func << endl;
			cout << "Абсолютная погрешность = " << fabs(func - Sn) << endl;
			cout << "Последний член ряда = " << last << endl;

			while (true) // Цикл интерфейса
			{
				cout << "Повторить вычисления (1) / Перейти к заданию 2 (2) / Закрыть программу (0)" << endl;
				getline(cin, c);

				if (c == "0")
				{
					end();
					return 0;
					break;
				}
				else if (c == "1" || c == "2")
					break;
				else
				{
					mistake();
					continue;
				}

				break;
			}

			if (c == "1")
				continue;

			break;
		}

		cout << "Задание 2" << endl;

		while (true) // Цикл задания 2
		{
			// Ввод и проверка необходимых переменных

			// Ввод
			cout << "Введите значение аргумента:" << endl << "x = ";
			string xch;
			getline(cin, xch);

			// Проверка
			double x = checkX(xch); // Знач-е арум-та
			if (x == 0)
			{
				mistake();
				continue;
			}

			// Ввод
			cout << "Введите точность вычислений:" << endl << "e = ";
			string ech;
			getline(cin, ech);


			// Проверка
			double e = checkE(ech); // Точность вычислений (некое маленькое число, 0<e<1)
			if (e == 1)
			{
				mistake();
				continue;
			}

			int n = 0; // Кол-во слагаемых
			double func = sin(x) / x;  // Точное знач-е данной в зад-нии функции
			double Sn = sumE(x, e, n); // Част-ная сумма ряда

			// Вывод результатов
			cout << "Частичная сумма ряда = " << Sn << endl;
			cout << "Точное значение данной в условии функции = " << func << endl;
			cout << "Количество членов ряда, больших чем погрешность = " << n << endl;
			Sn = sumE(x, (e / 10), n);
			cout << "Частичная сумма ряда с большей в 10 раз точностью = " << Sn << endl;
			cout << "Количество членов ряда, больших чем погрешность = " << n << endl;

			while (true) // Цикл интерфейса
			{
				cout << "Запустить программу сначала (1) / Повторить вычисления (2) / Закрыть программу (0)" << endl;
				getline(cin, c);

				if (c == "0")
				{
					end();
					return 0;
					break;
				}
				else if (c == "1" || c == "2")
					break;
				else
				{
					mistake();
					continue;
				}

				break;
			}

			if (c == "2")
				continue;

			break;
		}
		if (c == "1")
			continue;
	}
	return 0;
}

// Проверка введенного аргумента синуса
double checkX(string x)
{
	for (int i = 0; i < x.length(); i++)
	{
		if (x[i] == '.')
			x[i] = ',';

		if (!isdigit(x[i]) && x[i] != ',' && x[i] != '-')
		{
			return 0;
		}
	}

	return atof(x.c_str());;
}

// Проверка введеного кол-ва переменных
int checkN(string n)
{
	for (int i = 0; i < n.length(); i++)
	{
		if (!isdigit(n[i]) || n[0] == '0')
		{
			return 0;
		}
	}

	return atoi(n.c_str());;
}

// Проверка введенного эпсилон
double checkE(string e)
{
	for (int i = 0; i < e.length(); i++)
	{
		if (e[i] == '.')
			e[i] = ',';

		if (!isdigit(e[i]) && e[i] != ',' || e == "1")
			return 1;
	}

	return atof(e.c_str());
}

// Вычис-ние част-ой суммы ряда с данным кол-вом слагаемых
double sumN(double x, int n, double& last)
{
	last = 1; // Первое слаг-мое = 1 при любых x
	double Sn = last; // Част-ная сумма ряда изначально равна первому слаг-ому

	/* Повторяется, начиная с 2-х, потому что
	для 1-го члена идёт обращение к 0-му, которого не сущ-ет */
	for (int i = 2; i < n; i++)
	{
		// На каждой итерации обновляем значение последнего слаг-ого 
		last *= -x * x / (2 * i - 1) / (2 * i - 2); // То, как получила формулу, приложено в png
		Sn += last; // Увеличиваем част-ю сумму ряда, прибавляя каждое новое слаг-ое
	}

	return Sn; // Част-ая сумма ряда при n слаг-ых
}

// Вычис-ние част-ой суммы ряда с данной точностью
double sumE(double x, double e, int& n)
{
	double last = 1; // Первое слаг-мое = 1 при любых x
	double Sn = last; // Част-ная сумма ряда изначально равна первому слаг-ому

	/* Повторяется, начиная с 2-х, потому что
	для 1-го члена идёт обращение к 0-му, которого не сущ-ет */
	for (int n = 2; fabs(last) > e; n++)
	{
		last *= -x * x / (2 * n - 1) / (2 * n - 2); // То, как получила формулу, приложено в png
		Sn += last; // Увеличиваем част-ю сумму ряда, прибавляя каждое новое слаг-ое
	}

	return Sn; // Част-ая сумма ряда при точности равной e
}

// Вывод сообщ-я об ошибке
void mistake()
{
	cout << "Некорректный ввод, попробуйте снова!" << endl << endl;
}

// Вывод сообщ-я о завершении раб-ты прог-мы
void end()
{
	cout << "Завершение работы..." << endl;
}